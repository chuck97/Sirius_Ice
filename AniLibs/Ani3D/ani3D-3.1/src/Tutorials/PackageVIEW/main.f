c ==========================================================
      Program  main
c ==========================================================
c This program loads a mesh (data/aft.out) generated by 
c the libaft3D library (using the AFT format), and saves it 
c in  save.gmv using the GMV format).
c ==========================================================
      implicit none

      integer nvmax,ntmax,nbmax
c ... nvmax - maximum number of mesh nodes
c ... ntmax - maximum number of mesh tetrahedra
c ... nbmax - maximum number of boundary faces
      parameter(nvmax = 15 000, ntmax = 6*nvmax, nbmax = 10 000)

c ... work memory
      Integer   MaxWi
      Parameter(MaxWi = 5 000 000)

      Integer  iW(MaxWi)


c ... standard mesh arrays (see doc/user_guide.pdf for more detail)
c ... number of points, tets, and boundary faces
      Integer  nv, nt, nb 

c ... coordinates of mesh points 
      Real*8   vrt(3,nvmax)

c ... connectivity table for tets and their labels
      Integer  tet(4,ntmax),material(ntmax)

c ... connectivity table for boundary faces, and their labels
      Integer  bnd(3,nbmax),labelF(nbmax)

c ... additional mesh arrays are needed to call mesh_metric() from libmba3D.a 
c     ivfix(nvfix) is array of fixed (never touched) points
c     ibfix(nbfix) is array of fixed (never touched) faces
c     itfix(ntfix) is array of fixed (never touched) elements
      Integer   nvfix, ivfix(6), nbfix, ibfix(1), ntfix, itfix(1) 

      Real*8  Sol(nvmax)

      Integer i
c ==========================================================
c Load a mesh for a prism
      Call loadMaft(
     &     nvmax, nbmax, ntmax,
     &     nv, nb, nt,
     &     vrt, bnd, tet, labelF, material,
     &     nvfix, nbfix, ntfix, ivfix, ibfix, itfix,
     &     iW, iW, "../data/aft.out")

      Write(*,*)
      Write(*,'(A,I6,A)') 'The loaded mesh has ',nt,' tetrahedra'

c If material is 0, replace it with 1
      do i=1,nt
         if (material(i).eq.0) material(i)=1
      end do
      do i=1,nb
         if (labelF(i).eq.0) labelF(i)=1
      end do


c Create a GMV-file with the mesh only. The name must have extension .gmv
c     Call drawGMVmesh("save.gmv", 10,
c    &                  nv, vrt, nt, tet, nb, bnd, labelF)

c Define a solution vector
      do i = 1, nv
         Sol(i) = vrt(1,i) + vrt(2,i) + vrt(3,i)
      end do
c Create a GMV-file with the mesh and solution. The name must have extension .gmv
      Call GMVscalarVrt(Sol, "save.gmv", 10,
     &                nv, vrt, nt, tet, nb, bnd, labelF)


      Stop
      End

